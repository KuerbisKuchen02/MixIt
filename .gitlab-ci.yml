# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

# image: openjdk:17

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "36"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "36.0.0"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "13114758"

# Packages installation before running script
before_script:
  # Install jdk and glip compatibility libraries for glib (https://stackoverflow.com/a/75207901)
  - apk --no-cache add wget gcompat libstdc++ openjdk17

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-sdk-root"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
  - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
  - export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses > /dev/null || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

after_script:
  - echo "Bereinige tempor√§re Dateien"
  - rm -rf build/ tmp/ .cache/

# Make Project
BuildAndPackageApp:
  tags: 
    - alpine
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:assemble
    - ./gradlew -Pci --console=plain :app:bundle
  artifacts:
    paths:
      - app/build/outputs/

# Run all unit tests, if any fails, interrupt the pipeline(fail it)
UnitTests:
  stage: test
  tags: 
    - alpine
  interruptible: true
  script:
    - ./gradlew -Pci --console=plain :app:createDebugCoverageReport
    # Everything else doesnt work so just grap the relevant part from the html page and print it to the log
    - cat ./**/build/reports/coverage/test/debug/index.html | grep -o 'Total[^%]*%'
  coverage: '/Total.+([0-9]{1,3}%)/'
  artifacts:
    when: always
    paths:
      - ./**/build/reports/coverage/test/debug/index.html
      - ./**build/test-results/testDebugUnitTest/Test-*.xml
    reports:
      junit: [
        ./**/build/test-results/testDebugUnitTest/TEST-*.xml,
      ]

# Check linting
StaticCodeAnalysis:
  tags: 
    - alpine
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  artifacts:
    when: always
    paths:
      - app/lint/reports/lint-results-debug.html
    expose_as: "lint-report"

# If a tag is commited, create a new release using that tag
CreateRelease:
  stage: deploy
  tags: 
    - alpine
  rules:
    - if: '$CI_COMMIT_TAG'
  before_script:
    - apk --no-cache add glab
  script:
    - echo "Creating a new release..."
    - glab auth login --hostname  git.thm.de --token $GL_ACCESS_TOKEN
    - glab release create $CI_COMMIT_TAG --notes "Release with the binary https://git.thm.de/jdmn23/test/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=BuildAndPackageApp"
